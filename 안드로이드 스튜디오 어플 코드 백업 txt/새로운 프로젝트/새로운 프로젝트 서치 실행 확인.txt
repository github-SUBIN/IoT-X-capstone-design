새로운 프로젝트 - 블루투스 먼저
서치 블루투스 기계 작동 확인

package com.example.bluetoothplease

import android.Manifest
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.os.Bundle
import android.widget.ArrayAdapter
import android.widget.Button
import android.widget.ListView
import android.widget.TextView
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.activity.ComponentActivity
import androidx.core.app.ActivityCompat
import android.content.pm.PackageManager
import androidx.core.content.ContextCompat


class MainActivity : ComponentActivity()
{
    //private val REQUEST_ENABLE_BT = 1
    private lateinit var btAdapter: BluetoothAdapter

    // ActivityResultLauncher 선언
    private val enableBtLauncher = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()) { _ ->
        // Bluetooth 활성화 후 처리할 로직 추가 가능
        // Bluetooth 활성화 후 처리할 로직 (사용되지 않으므로 파라미터를 '_'로 대체)
    }

    private lateinit var textStatus: TextView
    private lateinit var btnPaired: Button
    private lateinit var btnSearch: Button
    private lateinit var btnSend: Button
    private lateinit var listView: ListView

    private lateinit var pairedDevices: Set<BluetoothDevice>
    private lateinit var btArrayAdapter: ArrayAdapter<String>
    private val deviceAddressArray: ArrayList<String> = ArrayList()

    private val receiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context, intent: Intent) {
            val action = intent.action
            if (BluetoothDevice.ACTION_FOUND == action) {
                val device = intent.getParcelableExtra<BluetoothDevice>(BluetoothDevice.EXTRA_DEVICE)
                val deviceName = device?.name ?: "Unknown Device"
                val deviceHardwareAddress = device?.address ?: "Unknown Address"
                btArrayAdapter.add(deviceName)
                deviceAddressArray.add(deviceHardwareAddress)
                btArrayAdapter.notifyDataSetChanged()
            }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?)
    {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main) //레이아웃 설정

        //findViewById로 뷰 연결
        textStatus = findViewById(R.id.text_status)
        btnPaired = findViewById(R.id.btn_paired)
        btnSearch = findViewById(R.id.btn_search)
        btnSend = findViewById(R.id.btn_send)
        listView = findViewById(R.id.listview)

        // ArrayAdapter 초기화
        btArrayAdapter = ArrayAdapter(this, android.R.layout.simple_list_item_1)
        listView.adapter = btArrayAdapter

        //권한 요청 로직
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.S) {
            val permissionList = arrayOf(
                Manifest.permission.BLUETOOTH_CONNECT,
                Manifest.permission.ACCESS_FINE_LOCATION,
                Manifest.permission.ACCESS_COARSE_LOCATION
            )
            ActivityCompat.requestPermissions(this, permissionList, 1)
        } else {
            val permissionList = arrayOf(
                Manifest.permission.ACCESS_FINE_LOCATION,
                Manifest.permission.ACCESS_COARSE_LOCATION
            )
            ActivityCompat.requestPermissions(this, permissionList, 1)
        }

        //Enable bluetooth
        // BluetoothAdapter 가져오기 (경고 무시)
        @Suppress("DEPRECATION")
        btAdapter = BluetoothAdapter.getDefaultAdapter()
        if(!btAdapter.isEnabled)
        {
            val enableBtIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)
            enableBtLauncher.launch(enableBtIntent) // startActivityForResult 대신 사용
        }

        //페어링 된 기기 목록을 가져오는 버튼 클릭 이벤트
        btnPaired.setOnClickListener {
            // 권한 체크 추가
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.S &&
                ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED) {
                // 권한이 없으면 실행 중지
                textStatus.setText(R.string.bluetooth_permission_not_granted)
                return@setOnClickListener
            }
            // 리스트 초기화
            btArrayAdapter.clear()
            if (deviceAddressArray.isNotEmpty()) {
                deviceAddressArray.clear()
            }

            // 페어링된 기기 목록 가져오기
            pairedDevices = btAdapter.bondedDevices
            if (pairedDevices.isNotEmpty()) {
                // 페어링된 기기가 있는 경우
                for (device in pairedDevices) {
                    val deviceName = device.name
                    val deviceHardwareAddress = device.address // MAC 주소
                    btArrayAdapter.add(deviceName) // 장치 이름을 어댑터에 추가
                    deviceAddressArray.add(deviceHardwareAddress) // 장치 주소를 리스트에 추가
                }
            }
        }
        // 주변 블루투스 기기 검색 버튼 클릭 이벤트
        btnSearch.setOnClickListener {
            if (btAdapter.isDiscovering) {
                btAdapter.cancelDiscovery()
            } else {
                if (btAdapter.isEnabled) {
                    btAdapter.startDiscovery()
                    btArrayAdapter.clear()
                    deviceAddressArray.clear()
                    val filter = IntentFilter(BluetoothDevice.ACTION_FOUND)
                    registerReceiver(receiver, filter)
                } else {
                    Toast.makeText(applicationContext, "Bluetooth is not on", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }
    override fun onDestroy() {
        super.onDestroy()
        // ACTION_FOUND 수신기 해제
        unregisterReceiver(receiver)
    }
}