새로운 프로젝트 - 블루투스 먼저
지피티거 그대로 복붙하고 recive랑 onDestroy 같은 search 관련 함수들 3개 주석처리함 
오류1 워닝 14인데 블루투스 연결 완료까지 확인함 ㅜㅜㅜㅜ ㅁㅊ

package com.example.bluetoothplease

import android.Manifest
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothSocket
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.os.Bundle
import android.os.SystemClock
import android.widget.ArrayAdapter
import android.widget.Button
import android.widget.ListView
import android.widget.TextView
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.activity.ComponentActivity
import androidx.core.app.ActivityCompat
import android.content.pm.PackageManager
import androidx.core.content.ContextCompat
import java.io.IOException
import java.io.InputStream
import java.io.OutputStream
import java.util.UUID

class MainActivity : ComponentActivity() {

    private lateinit var btAdapter: BluetoothAdapter
    private val enableBtLauncher = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) { /* Handle result if needed */ }

    private lateinit var textStatus: TextView
    private lateinit var btnPaired: Button
    private lateinit var btnSearch: Button
    private lateinit var btnSend: Button
    private lateinit var listView: ListView

    private lateinit var pairedDevices: Set<BluetoothDevice>
    private lateinit var btArrayAdapter: ArrayAdapter<String>
    private val deviceAddressArray: ArrayList<String> = ArrayList()

    /*
    private val receiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context, intent: Intent) {
            val action = intent.action
            if (BluetoothDevice.ACTION_FOUND == action) {
                val device = intent.getParcelableExtra<BluetoothDevice>(BluetoothDevice.EXTRA_DEVICE)
                val deviceName = device?.name ?: "Unknown Device"
                val deviceHardwareAddress = device?.address ?: "Unknown Address"
                btArrayAdapter.add(deviceName)
                deviceAddressArray.add(deviceHardwareAddress)
                btArrayAdapter.notifyDataSetChanged()
            }
        }
    }
    */

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        textStatus = findViewById(R.id.text_status)
        btnPaired = findViewById(R.id.btn_paired)
        btnSearch = findViewById(R.id.btn_search)
        btnSend = findViewById(R.id.btn_send)
        listView = findViewById(R.id.listview)

        btArrayAdapter = ArrayAdapter(this, android.R.layout.simple_list_item_1)
        listView.adapter = btArrayAdapter

        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.S) {
            val permissionList = arrayOf(
                Manifest.permission.BLUETOOTH_CONNECT,
                Manifest.permission.ACCESS_FINE_LOCATION,
                Manifest.permission.ACCESS_COARSE_LOCATION
            )
            ActivityCompat.requestPermissions(this, permissionList, 1)
        } else {
            val permissionList = arrayOf(
                Manifest.permission.ACCESS_FINE_LOCATION,
                Manifest.permission.ACCESS_COARSE_LOCATION
            )
            ActivityCompat.requestPermissions(this, permissionList, 1)
        }

        @Suppress("DEPRECATION")
        btAdapter = BluetoothAdapter.getDefaultAdapter()
        if (!btAdapter.isEnabled) {
            val enableBtIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)
            enableBtLauncher.launch(enableBtIntent)
        }

        btnPaired.setOnClickListener {
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.S &&
                ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED
            ) {
                textStatus.setText(R.string.bluetooth_permission_not_granted)
                return@setOnClickListener
            }
            btArrayAdapter.clear()
            deviceAddressArray.clear()
            pairedDevices = btAdapter.bondedDevices
            if (pairedDevices.isNotEmpty()) {
                for (device in pairedDevices) {
                    val deviceName = device.name
                    val deviceHardwareAddress = device.address
                    btArrayAdapter.add(deviceName)
                    deviceAddressArray.add(deviceHardwareAddress)
                }
            }
        }

        /*
        btnSearch.setOnClickListener {
            if (btAdapter.isDiscovering) {
                btAdapter.cancelDiscovery()
            } else {
                if (btAdapter.isEnabled) {
                    btAdapter.startDiscovery()
                    btArrayAdapter.clear()
                    deviceAddressArray.clear()
                    val filter = IntentFilter(BluetoothDevice.ACTION_FOUND)
                    registerReceiver(receiver, filter)
                } else {
                    Toast.makeText(applicationContext, "Bluetooth is not on", Toast.LENGTH_SHORT).show()
                }
            }
        }
        */

        listView.setOnItemClickListener { _, _, position, _ ->
            Toast.makeText(applicationContext, btArrayAdapter.getItem(position), Toast.LENGTH_SHORT).show()
            textStatus.text = "try..."

            val name = btArrayAdapter.getItem(position) ?: "Unknown Device"
            val address = deviceAddressArray[position]
            var flag = true

            val device = btAdapter.getRemoteDevice(address)

            try {
                val btSocket = createBluetoothSocket(device)
                btSocket.connect()

                val connectedThread = ConnectedThread(btSocket)
                connectedThread.start()
                textStatus.text = "connected to $name"
            } catch (e: IOException) {
                flag = false
                textStatus.text = "connection failed!"
                e.printStackTrace()
            }

            if (!flag) {
                textStatus.text = "connection failed!"
            }
        }
    }

    /*
    override fun onDestroy() {
        super.onDestroy()
        unregisterReceiver(receiver)
    }
    */

    // Inner class to handle Bluetooth communication
    inner class ConnectedThread(private val mmSocket: BluetoothSocket) : Thread() {
        private val mmInStream: InputStream? = mmSocket.inputStream
        private val mmOutStream: OutputStream? = mmSocket.outputStream

        override fun run() {
            val buffer = ByteArray(1024)
            while (true) {
                try {
                    val availableBytes = mmInStream?.available() ?: 0
                    if (availableBytes > 0) {
                        SystemClock.sleep(100)
                        val readBytes = mmInStream?.read(buffer, 0, availableBytes) ?: 0
                        // Process the read data here
                    }
                } catch (e: IOException) {
                    e.printStackTrace()
                    break
                }
            }
        }

        fun write(input: String) {
            val bytes = input.toByteArray()
            try {
                mmOutStream?.write(bytes)
            } catch (e: IOException) {
                e.printStackTrace()
            }
        }

        fun cancel() {
            try {
                mmSocket.close()
            } catch (e: IOException) {
                e.printStackTrace()
            }
        }
    }

    // Dummy method to simulate socket creation
    private fun createBluetoothSocket(device: BluetoothDevice): BluetoothSocket {
        // Replace with your actual Bluetooth socket creation logic
        return device.createRfcommSocketToServiceRecord(MY_UUID)
    }

    companion object {
        private val MY_UUID: UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB")
    }
}
