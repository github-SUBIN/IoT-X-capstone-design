package com.example.arduinoappmake

import android.Manifest
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothManager
import android.bluetooth.BluetoothSocket
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Bundle
import android.widget.Button
import androidx.appcompat.app.AppCompatActivity
import java.io.IOException
import java.util.UUID
import android.util.Log

//전역 변수로 블루투스 소켓 정의
var bluetoothSocket: BluetoothSocket? = null
private val bluetoothAdapter: BluetoothAdapter? by lazy {
    BluetoothAdapter.getDefaultAdapter()
}
private const val REQUEST_ENABLE_BT = 1
const val bluetoothPermissionRequestCode = 1  // 요청 코드 상수

class MainActivity:AppCompatActivity()
{
    override fun onCreate(savedInstanceState: Bundle?)
    {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // Enable Bluetooth
        bluetoothAdapter?.let { adapter ->
            if (!adapter.isEnabled) {
                val enableBtIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)
                startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT)
            } else {
                // Bluetooth is already enabled
                connectToBluetoothDevice()
            }
        }

        // 권한 요청
        val requiredPermissions = arrayOf(
            Manifest.permission.BLUETOOTH_CONNECT,
            Manifest.permission.ACCESS_FINE_LOCATION,
            Manifest.permission.ACCESS_COARSE_LOCATION
        )

        val missingPermissions = requiredPermissions.filter {
            checkSelfPermission(it) != PackageManager.PERMISSION_GRANTED
        }

        if (missingPermissions.isNotEmpty()) {
            requestPermissions(missingPermissions.toTypedArray(), bluetoothPermissionRequestCode)
        } else {
            connectToBluetoothDevice()
        }

        /*
        //블루투스 권한 요청 및 연결 시도
        if(checkSelfPermission(Manifest.permission.BLUETOOTH_CONNECT)!=PackageManager.PERMISSION_GRANTED)
        {
            requestPermissions(arrayOf(Manifest.permission.BLUETOOTH_CONNECT), 1)
        }
        else
        {
            connectToBluetoothDevice()
        }
        */

        //버튼 클릭 이벤트 설정
        val tempControlButton = findViewById<Button>(R.id.btnTempControl)
        val windowControlButton = findViewById<Button>(R.id.btnWindowControl)

        tempControlButton.setOnClickListener()
        {
            val intent = Intent(this, TempControlActivity::class.java)
            startActivity(intent)
        }

        windowControlButton.setOnClickListener()
        {
            val intent = Intent(this, WindowControlActivity::class.java)
            startActivity(intent)
        }
    }
    // 블루투스 연결 함수
    private fun connectToBluetoothDevice() {
        try {
            //val bluetoothAdapter = BluetoothAdapter.getDefaultAdapter()
            val bluetoothManager = getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
            val bluetoothAdapter = bluetoothManager.adapter
            if (checkSelfPermission(Manifest.permission.BLUETOOTH_CONNECT) == PackageManager.PERMISSION_GRANTED) {
                val device: BluetoothDevice? = bluetoothAdapter.getRemoteDevice("98:DA:40:02:E2:9C") // 블루투스 모듈의 MAC 주소
                val uuid: UUID = device?.uuids?.get(0)?.uuid ?: UUID.randomUUID()

                bluetoothSocket = device?.createRfcommSocketToServiceRecord(uuid)
                bluetoothSocket?.connect()
                
                if(bluetoothSocket?.isConnected == true)
                {
                    //연결 성공
                    Log.d("Bluetooth","블루투스 연결 성공")//로그 출력
                }
                else
                {
                    //연결 실패
                    Log.e("Bluetooth","블루투스 연결 실패")//로그 출력
                }
            }
        } catch (e: SecurityException) {
            e.printStackTrace()
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    // 권한 요청 결과 처리
    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == bluetoothPermissionRequestCode) {
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                connectToBluetoothDevice()
            } else {
                // 권한이 거부되었을 때 처리
                Log.e("Permissions", "권한이 거부되었습니다.")
            }
        }
    }

    // 블루투스 활성화 결과 처리
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == REQUEST_ENABLE_BT) {
            if (resultCode == RESULT_OK) {
                // Bluetooth 활성화 성공
                connectToBluetoothDevice()
            } else {
                // Bluetooth 활성화 실패
                Log.e("Bluetooth", "블루투스 활성화 실패")
            }
        }
    }


}