MainActivity 아침에 해보고 오류떠서 약간 고친거 그런데 얘는 작동 성공에 별 의미 없는듯..?

/*
package com.example.arduinoappmake

import android.Manifest
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothManager
import android.bluetooth.BluetoothSocket
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Bundle
import android.widget.Button
import androidx.appcompat.app.AppCompatActivity
import java.io.IOException
import java.util.UUID
import android.util.Log

//전역 변수로 블루투스 소켓 정의
var bluetoothSocket: BluetoothSocket? = null
private val bluetoothAdapter: BluetoothAdapter? by lazy {
    BluetoothAdapter.getDefaultAdapter()
}
private const val REQUEST_ENABLE_BT = 1
const val bluetoothPermissionRequestCode = 1  // 요청 코드 상수

class MainActivity:AppCompatActivity()
{
    override fun onCreate(savedInstanceState: Bundle?)
    {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // Enable Bluetooth
        bluetoothAdapter?.let { adapter ->
            if (!adapter.isEnabled) {
                val enableBtIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)
                startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT)
            } else {
                // Bluetooth is already enabled
                connectToBluetoothDevice()
            }
        }

        // 권한 요청
        val requiredPermissions = arrayOf(
            Manifest.permission.BLUETOOTH_CONNECT,
            Manifest.permission.ACCESS_FINE_LOCATION,
            Manifest.permission.ACCESS_COARSE_LOCATION
        )

        val missingPermissions = requiredPermissions.filter {
            checkSelfPermission(it) != PackageManager.PERMISSION_GRANTED
        }

        if (missingPermissions.isNotEmpty()) {
            requestPermissions(missingPermissions.toTypedArray(), bluetoothPermissionRequestCode)
        } else {
            connectToBluetoothDevice()
        }

        /*
        //블루투스 권한 요청 및 연결 시도
        if(checkSelfPermission(Manifest.permission.BLUETOOTH_CONNECT)!=PackageManager.PERMISSION_GRANTED)
        {
            requestPermissions(arrayOf(Manifest.permission.BLUETOOTH_CONNECT), 1)
        }
        else
        {
            connectToBluetoothDevice()
        }
        */

        //버튼 클릭 이벤트 설정
        val tempControlButton = findViewById<Button>(R.id.btnTempControl)
        val windowControlButton = findViewById<Button>(R.id.btnWindowControl)

        tempControlButton.setOnClickListener()
        {
            val intent = Intent(this, TempControlActivity::class.java)
            startActivity(intent)
        }

        windowControlButton.setOnClickListener()
        {
            val intent = Intent(this, WindowControlActivity::class.java)
            startActivity(intent)
        }
    }
    // 블루투스 연결 함수
    private fun connectToBluetoothDevice() {
        try {
            //val bluetoothAdapter = BluetoothAdapter.getDefaultAdapter()
            val bluetoothManager = getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
            val bluetoothAdapter = bluetoothManager.adapter
            if (checkSelfPermission(Manifest.permission.BLUETOOTH_CONNECT) == PackageManager.PERMISSION_GRANTED) {
                val device: BluetoothDevice? = bluetoothAdapter.getRemoteDevice("98:DA:40:02:E2:9C") // 블루투스 모듈의 MAC 주소
                val uuid: UUID = device?.uuids?.get(0)?.uuid ?: UUID.randomUUID()

                bluetoothSocket = device?.createRfcommSocketToServiceRecord(uuid)
                bluetoothSocket?.connect()
                
                if(bluetoothSocket?.isConnected == true)
                {
                    //연결 성공
                    Log.d("Bluetooth","블루투스 연결 성공")//로그 출력
                }
                else
                {
                    //연결 실패
                    Log.e("Bluetooth","블루투스 연결 실패")//로그 출력
                }
            }
        } catch (e: SecurityException) {
            e.printStackTrace()
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    // 권한 요청 결과 처리
    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == bluetoothPermissionRequestCode) {
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                connectToBluetoothDevice()
            } else {
                // 권한이 거부되었을 때 처리
                Log.e("Permissions", "권한이 거부되었습니다.")
            }
        }
    }

    // 블루투스 활성화 결과 처리
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == REQUEST_ENABLE_BT) {
            if (resultCode == RESULT_OK) {
                // Bluetooth 활성화 성공
                connectToBluetoothDevice()
            } else {
                // Bluetooth 활성화 실패
                Log.e("Bluetooth", "블루투스 활성화 실패")
            }
        }
    }


}
*/
/*
package com.example.arduinoappmake

import android.Manifest
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothManager
import android.bluetooth.BluetoothSocket
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Bundle
import android.widget.Button
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import java.io.IOException
import java.util.UUID
import android.util.Log

// 전역 변수로 블루투스 소켓 정의
var bluetoothSocket: BluetoothSocket? = null
private const val REQUEST_ENABLE_BT = 1
private const val bluetoothPermissionRequestCode = 1  // 요청 코드 상수

class MainActivity : AppCompatActivity() {

    private lateinit var enableBtLauncher: ActivityResultLauncher<Intent>

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // Bluetooth 활성화 요청을 위한 ActivityResultLauncher 초기화
        enableBtLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
            if (result.resultCode == RESULT_OK) {
                connectToBluetoothDevice()
            } else {
                Log.e("Bluetooth", "블루투스 활성화 실패")
            }
        }

        // Enable Bluetooth
        val bluetoothManager = getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
        val bluetoothAdapter = bluetoothManager.adapter
        if (bluetoothAdapter == null) {
            Log.e("Bluetooth", "BluetoothAdapter를 사용할 수 없습니다.")
            return
        }
        if (!bluetoothAdapter.isEnabled) {
            val enableBtIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)
            enableBtLauncher.launch(enableBtIntent)
        } else {
            connectToBluetoothDevice()
        }

        // 권한 요청
        val requiredPermissions = mutableListOf(
            Manifest.permission.ACCESS_FINE_LOCATION,
            Manifest.permission.ACCESS_COARSE_LOCATION
        )

        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.S) {
            requiredPermissions.add(Manifest.permission.BLUETOOTH_CONNECT)
        }

        val missingPermissions = requiredPermissions.filter {
            ContextCompat.checkSelfPermission(this, it) != PackageManager.PERMISSION_GRANTED
        }

        if (missingPermissions.isNotEmpty()) {
            ActivityCompat.requestPermissions(this, missingPermissions.toTypedArray(), bluetoothPermissionRequestCode)
        } else {
            connectToBluetoothDevice()
        }

        // 버튼 클릭 이벤트 설정
        val tempControlButton = findViewById<Button>(R.id.btnTempControl)
        val windowControlButton = findViewById<Button>(R.id.btnWindowControl)

        tempControlButton.setOnClickListener {
            val intent = Intent(this, TempControlActivity::class.java)
            startActivity(intent)
        }

        windowControlButton.setOnClickListener {
            val intent = Intent(this, WindowControlActivity::class.java)
            startActivity(intent)
        }
    }

    // 블루투스 연결 함수
    private fun connectToBluetoothDevice() {
        try {
            val bluetoothManager = getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
            val bluetoothAdapter = bluetoothManager.adapter
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT) == PackageManager.PERMISSION_GRANTED ||
                android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.S) {
                val device: BluetoothDevice? = bluetoothAdapter.getRemoteDevice("98:DA:40:02:E2:9C") // 블루투스 모듈의 MAC 주소
                val uuid: UUID = device?.uuids?.get(0)?.uuid ?: UUID.randomUUID()

                bluetoothSocket = device?.createRfcommSocketToServiceRecord(uuid)
                bluetoothSocket?.connect()

                if (bluetoothSocket?.isConnected == true) {
                    Log.d("Bluetooth", "블루투스 연결 성공") // 로그 출력
                } else {
                    Log.e("Bluetooth", "블루투스 연결 실패") // 로그 출력
                }
            }
        } catch (e: SecurityException) {
            e.printStackTrace()
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    // 권한 요청 결과 처리
    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == bluetoothPermissionRequestCode) {
            if (grantResults.isNotEmpty() && grantResults.all { it == PackageManager.PERMISSION_GRANTED }) {
                connectToBluetoothDevice()
            } else {
                Log.e("Permissions", "권한이 거부되었습니다.")
            }
        }
    }
}
*/

package com.example.arduinoappmake

import android.Manifest
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothManager
import android.bluetooth.BluetoothSocket
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.ArrayAdapter
import android.widget.Button
import android.widget.ListView
import android.widget.TextView
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import java.io.IOException
import java.util.UUID

var bluetoothSocket: BluetoothSocket? = null
private const val bluetoothPermissionRequestCode = 1

class MainActivity : AppCompatActivity() {

    private lateinit var enableBtLauncher: ActivityResultLauncher<Intent>
    private lateinit var textStatus: TextView
    private lateinit var btnPaired: Button
    private lateinit var btnSearch: Button
    private lateinit var btnSend: Button
    private lateinit var listView: ListView
    private lateinit var btnTempControl: Button
    private lateinit var btnWindowControl: Button
    private lateinit var pairedDevices: Set<BluetoothDevice>
    private lateinit var btArrayAdapter: ArrayAdapter<String>
    private lateinit var deviceAddressArray: ArrayList<String>
    private var bluetoothAdapter: BluetoothAdapter? = null  // 블루투스 어댑터를 멤버 변수로 선언

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // UI 요소 초기화
        textStatus = findViewById(R.id.text_status)
        btnPaired = findViewById(R.id.btn_paired)
        btnSearch = findViewById(R.id.btn_search)
        btnSend = findViewById(R.id.btn_send)
        listView = findViewById(R.id.listview)
        btnTempControl = findViewById(R.id.btnTempControl)
        btnWindowControl = findViewById(R.id.btnWindowControl)

        // 초기화
        btArrayAdapter = ArrayAdapter(this, android.R.layout.simple_list_item_1)
        deviceAddressArray = ArrayList()
        listView.adapter = btArrayAdapter

        // Bluetooth 활성화 요청을 위한 ActivityResultLauncher 초기화
        enableBtLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
            if (result.resultCode == RESULT_OK) {
                connectToBluetoothDevice()
            } else {
                Log.e("Bluetooth", "블루투스 활성화 실패")
            }
        }

        // Enable Bluetooth
        val bluetoothManager = getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
        bluetoothAdapter = bluetoothManager.adapter
        if (bluetoothAdapter == null) {
            Log.e("Bluetooth", "BluetoothAdapter를 사용할 수 없습니다.")
            return
        }
        if (!bluetoothAdapter!!.isEnabled) {
            val enableBtIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)
            enableBtLauncher.launch(enableBtIntent)
        } else {
            connectToBluetoothDevice()
        }

        // 권한 요청
        val requiredPermissions = mutableListOf(
            Manifest.permission.ACCESS_FINE_LOCATION,
            Manifest.permission.ACCESS_COARSE_LOCATION
        )

        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.S) {
            requiredPermissions.add(Manifest.permission.BLUETOOTH_CONNECT)
        }

        val missingPermissions = requiredPermissions.filter {
            ContextCompat.checkSelfPermission(this, it) != PackageManager.PERMISSION_GRANTED
        }

        if (missingPermissions.isNotEmpty()) {
            ActivityCompat.requestPermissions(this, missingPermissions.toTypedArray(), bluetoothPermissionRequestCode)
        } else {
            connectToBluetoothDevice()
        }

        // 버튼 클릭 이벤트 설정
        btnPaired.setOnClickListener { onClickButtonPaired() }

        btnSearch.setOnClickListener { onSearchButtonClicked() }

        btnSend.setOnClickListener { sendData("Your actual data here") }

        btnTempControl.setOnClickListener {
            val intent = Intent(this, TempControlActivity::class.java)
            startActivity(intent)
        }

        btnWindowControl.setOnClickListener {
            val intent = Intent(this, WindowControlActivity::class.java)
            startActivity(intent)
        }
    }

    private fun onClickButtonPaired() {
        btArrayAdapter.clear()
        deviceAddressArray.clear()

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT) == PackageManager.PERMISSION_GRANTED ||
            android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.S) {

            pairedDevices = bluetoothAdapter?.bondedDevices ?: emptySet()

            if (pairedDevices.isNotEmpty()) {
                for (device in pairedDevices) {
                    val deviceName = device.name
                    val deviceHardwareAddress = device.address

                    btArrayAdapter.add(deviceName)
                    deviceAddressArray.add(deviceHardwareAddress)
                }
                textStatus.text = getString(R.string.paired_devices_found, pairedDevices.size)
            } else {
                textStatus.text = getString(R.string.no_paired_devices)
            }
        } else {
            textStatus.text = getString(R.string.bluetooth_permission_required)
        }
    }

    private fun onSearchButtonClicked() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_SCAN) == PackageManager.PERMISSION_GRANTED ||
            android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.S) {

            if (bluetoothAdapter?.isDiscovering == true) {
                bluetoothAdapter?.cancelDiscovery()
            }
            bluetoothAdapter?.startDiscovery()
            textStatus.text = getString(R.string.device_searching)
        } else {
            textStatus.text = getString(R.string.bluetooth_permission_required)
        }
    }

    private fun sendData(data: String) {
        try {
            if (bluetoothSocket != null && bluetoothSocket!!.isConnected) {  // 소켓이 연결되었는지 확인
                val outputStream = bluetoothSocket?.outputStream
                outputStream?.write(data.toByteArray())
                textStatus.text = getString(R.string.data_sent_success)
            } else {
                textStatus.text = getString(R.string.no_bluetooth_connection)
            }
        } catch (e: IOException) {
            textStatus.text = getString(R.string.data_send_failure)
            e.printStackTrace()
            try {
                bluetoothSocket?.close()  // 예외 발생 시 소켓을 닫음
            } catch (closeException: IOException) {
                closeException.printStackTrace()
            }
        }
    }

    private fun connectToBluetoothDevice() {
        try {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT) == PackageManager.PERMISSION_GRANTED ||
                android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.S) {

                val device: BluetoothDevice? = bluetoothAdapter?.getRemoteDevice("98:DA:40:02:E2:9C")  // HC-06의 MAC 주소
                val uuid: UUID = device?.uuids?.get(0)?.uuid ?: UUID.randomUUID()

                bluetoothSocket = device?.createRfcommSocketToServiceRecord(uuid)
                bluetoothSocket?.connect()

                if (bluetoothSocket?.isConnected == true) {
                    Log.d("Bluetooth", "블루투스 연결 성공")
                    switchToSmartHomeUI()
                } else {
                    Log.e("Bluetooth", "블루투스 연결 실패")
                }
            } else {
                Log.e("Bluetooth", "Bluetooth 연결 권한이 없습니다.")
            }
        } catch (e: SecurityException) {
            e.printStackTrace()
        } catch (e: IOException) {
            Log.e("Bluetooth", "블루투스 연결 중 오류 발생, 재시도 중...")
            try {
                bluetoothSocket?.close()  // 소켓 닫기
            } catch (closeException: IOException) {
                closeException.printStackTrace()
            }
        }
    }

    // 스마트 홈 UI로 전환
    private fun switchToSmartHomeUI() {
        textStatus.visibility = View.GONE
        btnPaired.visibility = View.GONE
        btnSearch.visibility = View.GONE
        btnSend.visibility = View.GONE
        listView.visibility = View.GONE

        btnTempControl.visibility = View.VISIBLE
        btnWindowControl.visibility = View.VISIBLE
        findViewById<TextView>(R.id.tvWelcome).visibility = View.VISIBLE
        findViewById<TextView>(R.id.tvWlecomeWel).visibility = View.VISIBLE
    }

    // 권한 요청 결과 처리
    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == bluetoothPermissionRequestCode) {
            if (grantResults.isNotEmpty() && grantResults.all { it == PackageManager.PERMISSION_GRANTED }) {
                connectToBluetoothDevice()
            } else {
                Log.e("Permissions", "권한이 거부되었습니다.")
            }
        }
    }
}

